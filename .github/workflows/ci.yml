name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  Linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Poetry cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        # TODO: fix errors so that we can run `make dev` instead
        run: |
          make full

      - name: Lint with isort, black, docformatter, flake8
        run: |
          make lint

  Typing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pydantic-version: ["1.10.9", "2.4.2"]
        openai-version: ["0.28.1", "1.2.4"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Poetry cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ matrix.pydantic-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        # TODO: fix errors so that we can run `make dev` instead
        run: |
          make full
          poetry run pip install pydantic==${{ matrix.pydantic-version }}
          poetry run pip install openai==${{ matrix.openai-version }}

      - if: matrix.pydantic-version == '2.4.2' && matrix.openai-version == '0.28.1'
        name: Static analysis with pyright (ignoring pydantic v1 and openai v1)
        run: |
          make type-pydantic-v2-openai-v0

      - if: matrix.pydantic-version == '1.10.9' && matrix.openai-version == '0.28.1'
        name: Static analysis with mypy (ignoring pydantic v2 and openai v1)
        run: |
          make type-pydantic-v1-openai-v0

      - if: matrix.pydantic-version == '2.4.2' && matrix.openai-version == '1.2.4'
        name: Static analysis with pyright (ignoring pydantic v1 and openai v0)
        run: |
          make type-pydantic-v2-openai-v1

      - if: matrix.pydantic-version == '1.10.9' && matrix.openai-version == '1.2.4'
        name: Static analysis with mypy (ignoring pydantic v2 and openai v0)
        run: |
          make type-pydantic-v1-openai-v1

  Pytests:
    runs-on: LargeBois
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        # TODO: fix errors so that we can run both `make dev` and `make full`
        # dependencies: ['dev', 'full']
        dependencies: ["full"]
        pydantic-version: ["1.10.9", "2.4.2"]
        openai-version: ["0.28.1", "1.2.4"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Poetry cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ matrix.pydantic-version }}-${{ matrix.openai-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        run: |
          make ${{ matrix.dependencies }}
          poetry run pip install pydantic==${{ matrix.pydantic-version }}
          poetry run pip install openai==${{ matrix.openai-version }}

      - name: Run Pytests
        run: |
          make test-cov

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  Notebooks:
    runs-on: ubuntu-latest
    needs: [Linting, Typing, Pytests]
    strategy:
      matrix:
        # this line is automatically generated by the script in .github/workflows/scripts/update_notebook_matrix.sh
        notebook: ["bug_free_python_code.ipynb","check_for_pii.ipynb","competitors_check.ipynb","extracting_entities.ipynb","generate_structured_data.ipynb","generate_structured_data_cohere.ipynb","guardrails_with_chat_models.ipynb","input_validation.ipynb","llamaindex-output-parsing.ipynb","no_secrets_in_generated_text.ipynb","provenance.ipynb","recipe_generation.ipynb","regex_validation.ipynb","response_is_on_topic.ipynb","secrets_detection.ipynb","select_choice_based_on_action.ipynb","streaming.ipynb","syntax_error_free_sql.ipynb","text_summarization_quality.ipynb","toxic_language.ipynb","translation_to_specific_language.ipynb","translation_with_quality_check.ipynb","valid_chess_moves.ipynb","value_within_distribution.ipynb"]
    env:
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        NLTK_DATA: /tmp/nltk_data
    steps:
        - name: Checkout repository
          uses: actions/checkout@v4    
        - name: Set up Python
          uses: actions/setup-python@v5
          with: 
            python-version: 3.11.x
        # - name: Poetry cache
        #   uses: actions/cache@v3
        #   with:
        #     path: ~/.cache/pypoetry
        #     key: poetry-cache-${{ runner.os }}-3.11.x-${{ env.POETRY_VERSION }}
        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true
        - name: Install dependencies
          run: |
            make full;
            poetry add "openai>=1.2.4" jupyter nbconvert cohere;
        - name: Check for pypdfium2
          run: poetry run pip show pypdfium2
        - name: Huggingface Hub Login
          run: poetry run huggingface-cli login --token $HUGGINGFACE_API_KEY
        - name: download nltk data
          run: |
            mkdir /tmp/nltk_data;
            poetry run python -m nltk.downloader -d /tmp/nltk_data punkt;
        - name: Use venv
          run: source .venv/bin/activate
        - name: Execute notebooks and check for errors
          run: bash ./.github/workflows/scripts/run_notebooks.sh ${{ matrix.notebook }}
