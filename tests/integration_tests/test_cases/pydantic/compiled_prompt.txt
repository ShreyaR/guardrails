
Generate data for possible users in accordance with the specification below.


Given below is XML that describes the information to extract from this document and the tags to extract it into.


<output>
    <list name="people" description="A list of 3 people.">
        <object description="Information about a person." pydantic="Person">
            <string name="name" description="The name of the person."/>
            <integer name="age" description="The age of the person." format="age-must-be-between-0-and-150"/>
            <string name="zip_code" description="The zip code of the person." format="zip-code-must-be-numeric; zip-code-in-california"/>
        </object>
    </list>
</output>



Given below is XML that describes the information to extract from this document and the tags to extract it into.

<output>
    <list name="people" description="A list of 3 people.">
        <object description="Information about a person." pydantic="Person">
            <string name="name" description="The name of the person."/>
            <integer name="age" description="The age of the person." format="age-must-be-between-0-and-150"/>
            <string name="zip_code" description="The zip code of the person." format="zip-code-must-be-numeric; zip-code-in-california"/>
        </object>
    </list>
</output>


ONLY return a valid JSON object (no other text is necessary), where the key of the field in JSON is the `name` attribute of the corresponding XML, and the value is of the type specified by the corresponding XML's tag. The JSON MUST conform to the XML format, including any types and format requests e.g. requests for lists, objects and specific types. Be correct and concise.

Here are examples of simple (XML, JSON) pairs that show the expected behavior:
- `<string name='foo' format='two-words lower-case' />` => `{'foo': 'example one'}`
- `<list name='bar'><string format='upper-case' /></list>` => `{"bar": ['STRING ONE', 'STRING TWO', etc.]}`
- `<object name='baz'><string name="foo" format="capitalize two-words" /><integer name="index" format="1-indexed" /></object>` => `{'baz': {'foo': 'Some String', 'index': 1}}`

JSON Object: